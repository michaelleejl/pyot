//primitives and built in types beyond Integer, String, Float, etc
//Binary - like a boolean, but states are on (truthy) and off (false) rather than true and false
//ID - not sure if this should be a primitive or a type, but identified as “ip_XXXX.XXXX.XXXX.XXXX” or “mac________”. 
//ID is associated with the physical device. Needs to be passed into the constructor. Can auto-update if the device IP address changes.
//Range. Built in type - comprises current value, range start, range end, interval (integer)

type Device {
  virtual String name
  ID id
}

//all “types” implicitly extend the root “Device” type
type BinarySwitch {
  Binary state
}

type Light {
  Binary state
  Range intensity
}

type ColouredLight extends Light {
  Colour colour
}

interface PhillipsHue{
  api: “PhillipsHueAPI”,
  type: ColouredLight,
  state: {
    get: isOn
    set: (val) => toggle(val)
  }
  intensity: {
    get: Range(getBrightness, getMinBrightness, getMaxBrightness, state.brightnessInterval)
    set: (val) => setBrightness(val)
  }
  colour: {
    get: state.colour
    set: (val) => setColour(val.red, val.blue, val.green)
  }
}

#DiscoLight {
  Colour colour
  Integer intensity
}

//When constructing an instance of a virtual device, the id (which is how a link between the virtual and the physical device is established) and all virtual state must be initialised
let riaRoomLight1 = ColouredLight (name: “Ria’s Room Light 1”, id: ip_73.235.45.24){ #DiscoLight }

let riaLightSwitch = BinarySwitch(name: “Ria’s Light Switch”,  id: ip_73.235.45.242)

action riaClick{
  alias: `${riaLightSwitch.name} clicked`
  //“inner scenes”
  scene riaOn {
  }
  scene riaOff {
  }
  onChange: {
      dependencies: [riaLightSwitch.state]
      behaviour: if riaRoomLight1.state then setScene(riaOn) else setScene(riaOff)
  }
}




   